// t2.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <windows.h>
#include <stdio.h>
#include <iostream>
#include <math.h>
#include <time.h>
#include <string.h>


int N = 50;
int ncycle = 100;
int Dimension = 2 ;
int LDimension = 1 ;

float lambda0 = 1.0;
int PrintN = 10;
int TCycle = (int)(1e3);
float Rc_LL0 = (float)(TCycle * 1.0);
//--------------------------------------------------------------------------------
void initial_X(float *x, int N, int LDimension)
{   int q = RAND_MAX;
    for (int i = 0; i < N*LDimension; i++) 
       x[i] = (float)(1.0 * rand() / q);
	 printf("--- Random data generation is done\n");
}
//--------------------------------------------------------------------------------
void print_initial_X(float *x, int N, int LDimension)
{   printf("---------  Print intialization values  -----------------\n");
	for (int i = 0; i < N*LDimension; i++) 
       printf("%d) %f\n", i, x[i]);
}
//--------------------------------------------------------------------------------
void decreasing_lambda(int ncycle)
{   printf("---------  Test decreasing function  -----------------\n");
	for(int i=0; i<ncycle; i++)
	{ 					
		float lambda = lambda0 - lambda0*i / ncycle; 
		//float lambda = lambda0/ (1.0+i);
		printf("%d) %f\n", i, lambda);
	}
}
//--------------------------------------------------------------------------------
void get_MD(float *OData, int N, int Dimension)
{
  float pi_v = 3.1416;
  float pi_1 = 0.0, inc_pi = 2*3.1416/N;
  for (int i=0; i<N; i++)
  {
	  OData[i] = pi_1;
      OData[i+N] = sin(pi_1);
	  pi_1 += inc_pi;
  }
	  
  //------- printing original data ---
  for (int i=0; i< N; i++)
  {   printf("%d) ", i);
	  for(int j=0; j<Dimension; j++)
	      printf("%f , ", OData[i + N*j]);
	  printf("%\n");
  }
  printf("--- Reading original data space is done\n");			
}
//--------------------------------------------------------------------------------
void SPE_CPU(int a, float *OData, float lambda,float *x, float rcut, int Dimension, int LDimension, int N)
{ 
	for(int b=0; b<N; b++)
	{      float sum = 0.0;
		   for(int k=0; k<LDimension; k++)
		      sum += (float)((x[a+ N*k] - x[b+ N*k]) * (x[a+N*k] - x[b+N*k]));												  
		   float dab = sqrt(sum);
    															              															
		   sum = 0.0;															
		   for(int k=0; k<Dimension; k++)
			   sum += (float)((OData[a + N*k] - OData[b+ N*k]) * (OData[a+ N*k] - OData[b+ N*k]));	
		   float rab = sqrt(sum);
				
 	       if (((rab <= rcut) || ((rab>rcut) && (dab < rab))))
           //if ((dab<=rcut) || ((dab > rcut)&&(dab<rab)))																	
		     {   float T;
		         T = (float)(lambda * (rab - dab) / (dab + 1e-8));																																		          								
			     for (int k=0; k<LDimension; k++)
                       x[b+N*k] += (float)(T * (x[b+N*k] - x[a+N*k]));    																																																																													
			  }													  
      } 
  } 
//--------------------------------------------------------------------------------
void stress(float *x, float *OData, int N, float &S, float rcut, int Dimension, int LDimension)
{		int i, a, b;		
		float b1=0, b2=0;
		for (i=0; i<N; i++)
		//for (j=i+1; j<N; j++)
		{ 
			a = (int)(rand() * (float)(N-1) / (RAND_MAX+1.0));
			while(1) {
					b = (int)(rand() * (float)(N-1) / (RAND_MAX+1.0));
					if (b == a) continue;
					else break;
		    }
			//a = i;
			//b = j;      
			float sum = 0.0;
			for(int k=0; k<LDimension; k++)
				sum += (float)((x[a+N*k] - x[b+N*k]) * (x[a+N*k] - x[b+N*k]));
			float dab = sqrt(sum);
									
			int k;
			sum = 0.0;
			for(k=0; k<Dimension; k++)
				sum += (float)((OData[a + N*k] - OData[b+ N*k]) * (OData[a+ N*k] - OData[b+ N*k]));	
			float rab = sqrt(sum); 
			//(abs(rab) > 0)&&
			if (((rab <= rcut) || ((rab>rcut)&&(dab < rab))))
			{  b1 += (float)((dab - rab) * (dab - rab)/(1e-8 + rab));
			   b2 += rab ;
			}
		}
		S = (float) (b1/(1e-8+b2));
}
//--------------------------------------------------------------------------------
void Store_Data(float *S, int N, int No_Dim, int Tdata)
{	 
   char fname[200] = "";
   char ch1[200] = "D:\\sin.txt";
   char ch2[200] = "D:\\sin_proj.txt";
   char ch3[200] = "D:\\sin_proj_final.txt";
   if (Tdata == 1)  strcat(fname, ch1);
   else if (Tdata == 2)   strcat(fname, ch2);
   else strcat(fname, ch3);

   FILE *fp1;
   fp1 = fopen(fname,"w");
   for(int i=0; i<(N*No_Dim); i++)
	  fprintf(fp1,"%f,", S[i]);			  
   fclose(fp1);
   
}
//--------------------------------------------------------------------------------
int _tmain(int argc, _TCHAR* argv[])
{
	srand ( (unsigned int)time(NULL) );
	
	float *OData, *x;
    OData = (float*) malloc(Dimension*N*sizeof(float));
	x=(float*)malloc(N*LDimension*sizeof(float));   

	get_MD(OData, N, Dimension);
    Store_Data(OData, N, Dimension , 1);
	initial_X(x, N, LDimension);  
	Store_Data(x, N, LDimension , 2);
	//print_initial_X(x, N, LDimension);

	//decreasing_lambda(ncycle);

	for(int i=0; i<ncycle; i++)
		{ 		int a = rand()% N;		
				float lambda = lambda0 - lambda0 * i / ncycle; 			
				float Rc_LL = Rc_LL0 - Rc_LL0 * i / ncycle; 				            						
			    SPE_CPU(a, OData, lambda, x, Rc_LL, Dimension, LDimension, N);  							 						 
				if ((i% PrintN ==0) && (i !=0))
					{  float S1 = 0.0;           
					   stress(x, OData, N, S1, Rc_LL, Dimension, LDimension);
					   printf("%3d Stress = %f\n", i, S1);
					}
		} 
	Store_Data(x, N, LDimension , 3);
	printf("----------------  Program End  -----------------\n");
	getchar();
	return 0;
}

